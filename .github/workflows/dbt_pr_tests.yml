name: DBT PR Test

on:
  # Allows you to reference this workflow from another workflow
  workflow_call:

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

  # Executes this test when Pull Requests are made against the Main branch
  pull_request:
    branches:    
      - main
    paths:
      - 'warehouse/**'

# Allow one concurrent deployment per Pull Request. Cancel In-Progress Workflow if PR Changes trigger another Test.
concurrency:
  group: ci-${{ github.event.pull_request.id }}
  cancel-in-progress: true

env:
  SNOWFLAKE_USER: "DBT_GITHUB_CI_USER"
  SNOWFLAKE_PASSWORD: ${{ secrets.DBT_GITHUB_CI_USER_PASSWORD }}
  SNOWFLAKE_ACCOUNT: ${{ secrets.DBT_TARGET_ACCOUNT }}
  SLACK_WEBHOOK_URL: ${{ secrets.DATA_SLACK_WEBHOOK_URL }}
  SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
  GITHUB_ACTION_URL: "https://github.com/betterup/betterup-analytics/actions/workflows/dbt_pr_tests.yml"
  PR_ID: ${{ github.event.pull_request.id }}
  PR_AUTHOR: ${{ github.event.pull_request.user.login }}
  DBT_PROJECT_EVALUATOR_SEVERITY: "error"
  COMMIT_SHA: ${{ github.sha }}
  DEPLOYMENT_ENVIRONMENT: ${{ secrets.BETTERUP_ENVIRONMENT }}

jobs:
     
  dbt_pr_test:
    strategy:
      matrix:
        environment: ['US Prod','EU Prod']

    name: DBT PR Test 
    runs-on: ubuntu-latest
    environment: ${{ matrix.environment }}
    defaults:
      run:
        working-directory: warehouse

    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Install python dependencies
        # Retry 3 times before the install actually fails 
        run: |
          (echo "===== Install Attempt: 1 =====" && make installdeps) || \
          (echo "===== Install Attempt: 2 =====" && make installdeps) || \
          (echo "===== Install Attempt: 3 =====" && make installdeps) || \
          (echo "===== Install python dependencies step failed =====" && exit 1)

      - name: Write DBT configs
        run: |
          make writedbtconfig
          
      - name: Retrieve PR ID for Schema Name
        if: github.event_name == 'pull_request'
        run: |
          CLEANED_PR_AUTHOR="$(tr '-' '_' <<< "$PR_AUTHOR")"
          export CLEANED_PR_AUTHOR
          echo "SNOWFLAKE_SCHEMA=${CLEANED_PR_AUTHOR}_PR_${PR_ID}" >> "$GITHUB_ENV" # Set the Snowflake Schema Var for DBT

      - name: Set schema name if run not triggered by pull request
        if: github.event_name != 'pull_request'
        run: |
          echo "SNOWFLAKE_SCHEMA=${COMMIT_SHA}" >> "$GITHUB_ENV" # Set the Snowflake Schema Var for DBT

      - name: Comment Schema on PR
        if: github.event_name == 'pull_request'
        uses: thollander/actions-comment-pull-request@v2
        with:
          message: |
            PR Schema: DBT_${{ env.SNOWFLAKE_SCHEMA }}
          comment_tag: schema_id
      
      - name: Download Last Successful Prod Manifest
        id: download-artifact
        uses: dawidd6/action-download-artifact@v2
        with:
          github_token: ${{secrets.GITHUB_TOKEN}}
          workflow: dbt.yml
          workflow_conclusion: success
          branch: main
          path: warehouse/prod_artifact/
          check_artifacts:  false
          search_artifacts: false
          skip_unpack: false
          if_no_artifact_found: fail
          
      - name: Rename Prod Manifest for Defer Path 
        run: |-
          mkdir prod_artifact/run &&
          cp ./prod_artifact/dbt-build-artifacts/dbtrun__manifest.json ./prod_artifact/run/manifest.json &&
          cp ./prod_artifact/dbt-build-artifacts/dbtrun__run_results.json ./prod_artifact/run/run_results.json

      - name: Install DBT dependencies
        run: |
          poetry run dbt deps --target dev_with_pass
                    
        #refresh the dbt_project_evaluator_exceptions to pick up any new exceptions
      - name: Run DBT Seed dbt_project_evaluator_exceptions
        run: poetry run dbt seed --select dbt_project_evaluator_exceptions --target dev_with_pass
      
      - name: Run DBT fct_missing_primary_key_tests
        run: poetry run dbt build --select +fct_missing_primary_key_tests --target dev_with_pass

      - name: Check for Meta Owner Presence
        run: poetry run dbt test --select test__model_meta_owner --target dev_with_pass
        
        # This step retrieves a list of incremental model tables from the source schema.
        # It runs the 'dbt ls' command with the '--target prod' flag to get the actual location of the source items.
        # The output is filtered and saved to 'inc_models.txt' for later use in the cloning process.

        ## Environment Divergence Start ##
      
      - name: Get Incremental Model List US
        if: matrix.environment == 'US Prod'
        run: poetry run dbt ls --select config.materialized:incremental --resource-type=model --output json --output-keys "name database schema" --target prod | tee inc_models.txt 
      
      - name: Get Incremental Model List EU
        if: matrix.environment == 'EU Prod'
        run: poetry run dbt ls --selector job__eu_get_incremental --resource-type=model --output json --output-keys "name database schema" --target prod | tee inc_models.txt
        
        ## Environment Divergence End ##

      
        # This step clones incremental model tables from the source schema into a PR-specific schema.
        # It reads the table information from 'inc_models.txt' and runs 'dbt run-operation' for each table.
      - name: Clone Incremental Models into PR Schema
        run: |
          chmod +x ../bin/warehouse/clone_tables.sh
          sudo apt-get install -y jq
          ../bin/warehouse/clone_tables.sh ${{ env.SNOWFLAKE_SCHEMA }}

        ## Environment Divergence Start ##
      
      - name: Run DBT w/ Defer US
        if: matrix.environment == 'US Prod'
        run: poetry run dbt build --select state:modified+ 
                                  --vars '{"account_env":"${{ matrix.environment }}"}' 
                                  --exclude  models/betterup_eu/ models/betterup_gov package:dbt_project_evaluator
                                  --defer 
                                  --state prod_artifact/run/ 
                                  --target dev_with_pass
      
      - name: Run DBT w/ Defer EU
        if: matrix.environment == 'EU Prod'
        run: poetry run dbt build --select +tag:eu,state:modified+ 
                                  --vars '{"account_env":"${{ matrix.environment }}"}' 
                                  --exclude  models/betterup_eu/ models/betterup_gov package:dbt_project_evaluator test_name:expect_column_distinct_values_to_contain_set test_name:at_least_one
                                  --defer 
                                  --state prod_artifact/run/ 
                                  --target dev_with_pass
                                  --indirect-selection=cautious
      
      ## Environment Divergence End ##
      
      
      - name: Archive target artifacts
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: dbt-build-artifacts
          path: |
            warehouse/target
