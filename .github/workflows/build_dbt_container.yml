name: Build DBT Gov Image

on:
  push:
    branches:
      - gov-*
  pull_request:
    branches:
      - gov-*

env:
  PCC_CONSOLE_URL: 'https://prisma.betterup.co/'
  REPO_NAME: 'betterup-analytics'

jobs:
  tag_build:
    name: Generate Build Tag
    runs-on: ubuntu-latest

    steps:
    - name: Set Build Tag Env
      id: build_tag
      run: echo "TAG=$(date '+%Y.%-m.%-d').${GITHUB_SHA:0:4}-GOV" >> "$GITHUB_OUTPUT"

    outputs:
      tag: ${{ steps.build_tag.outputs.TAG }}

  build_push_image:
    name: Build and Push Image
    needs: tag_build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        dockerfile:
        - ".fedramp/Dockerfile"
        # *** Keep this until post-ATO ***
        # - ".fedramp/Dockerfile.fips"
        # FIPS only works with python on debian
        # We likely don't need FIPS in this container
        # This file is here for a backup plan
    env:
      TAG: ${{ needs.tag_build.outputs.tag }}

    steps: 
    - uses: actions/checkout@v2
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to Harbor Container Registry
      uses: docker/login-action@v2
      with:
        registry: ${{ secrets.HARBOR_REGISTRY }}
        username: ${{ secrets.HARBOR_USERNAME }}
        password: ${{ secrets.HARBOR_TOKEN }}

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v1
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract Dockerfile Extension for Prefix
      id: extract_ext
      env:
        DOCKERFILE: ${{ matrix.dockerfile }}
      run: |
        echo "$DOCKERFILE" | python warehouse/.fedramp/bin/tag-image-suffix >> "$GITHUB_ENV"
      shell: bash

    - name: Build to local registry to scan
      env:
        IMAGE_TAG: ghcr.io/betterup/${{ env.REPO_NAME }}:${{ env.TAG }}${{ env.TAG_SUFFIX }}
      run: |
        docker build . -t "$IMAGE_TAG" -f .fedramp/Dockerfile
      working-directory: warehouse/
    
    - name: Prisma Cloud image scan
      id: scan
      uses: PaloAltoNetworks/prisma-cloud-scan@v1
      with:
        pcc_console_url: ${{ env.PCC_CONSOLE_URL }}
        pcc_user: ${{ secrets.PCC_USER }}
        pcc_pass: ${{ secrets.PCC_PASS }}
        image_name: ghcr.io/betterup/${{ env.REPO_NAME }}:${{ env.TAG }}${{ env.TAG_SUFFIX }}

    - name: Push to ghcr.io
      env:
        IMAGE_REGISTRY: ghcr.io/betterup/${{ env.REPO_NAME }}
        IMAGE_TAG: ghcr.io/betterup/${{ env.REPO_NAME }}:${{ env.TAG }}${{ env.TAG_SUFFIX }}
      run: |
        docker push "$IMAGE_TAG"
        echo "TAG_DIGEST=$(docker images "$IMAGE_REGISTRY" --digests | awk 'NR!=1 {print $3}')" >> "$GITHUB_ENV"

    - name: Install Cosign
      uses: sigstore/cosign-installer@main

    - name: Sign image with Cosign
      run: |
        cosign sign --key env://COSIGN_PRIVATE_KEY "${TAGS}"
      env:
        TAGS: ghcr.io/betterup/${{ env.REPO_NAME }}:${{ env.TAG }}@${{ env.TAG_DIGEST }}
        COSIGN_PRIVATE_KEY: ${{secrets.COSIGN_PRIVATE_KEY}}
        COSIGN_PASSWORD: ${{secrets.COSIGN_PASSWORD}}
    
  commit_tag:
    name: Commit Build Tag
    runs-on: ubuntu-latest
    needs: [tag_build, build_push_image]
    env:
      TAG: ${{ needs.tag_build.outputs.tag }}
    steps:
    
    - uses: actions/checkout@v2
      if: github.event_name != 'pull_request'
    
    - uses: actions/checkout@v2
      if: github.event_name == 'pull_request'
      with:
        fetch-depth: 0
        ref: ${{ github.event.pull_request.head.ref }}
    
    - name: Set gov-dev image.tag
      run: |
        python \
          warehouse/.fedramp/bin/edit-yaml-value \
            charts/dbt/values.yaml \
            image.tag \
            "$TAG"
        git add charts/dbt/values.yaml
        git config --global user.email "data-ops@betterup.co"
        git config --global user.name "DataOps Bot"
        git commit -m "Tags gov-dev build with $TAG"
        git push
